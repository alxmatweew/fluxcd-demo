apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-metrics
  namespace: vm
spec:
  interval: 5m
  driftDetection:
    mode: enabled # Следит за изменениями и возвращает к состоянию как в Git  
  chart:
    spec:
      chart: victoria-metrics-k8s-stack  # Название чарта
      version: "0.42.0" # Версия чарта (опционально)
      sourceRef:
        kind: HelmRepository
        name: victoria-metrics-repo
        namespace: flux-system
      interval: 1m
  values:
    nameOverride: "vm"
    victoria-metrics-operator:
      enabled: true
      crds:
        plain: true
        cleanup:
          enabled: true
    defaultDashboards:
      # -- Enable custom dashboards installation
      enabled: true
      defaultTimezone: Asia/Yekaterinburg
      grafanaOperator:
        # -- Create dashboards as CRDs (requires grafana-operator to be installed)
        enabled: false
        # spec:
        #   instanceSelector:
        #     matchLabels:
        #       dashboards: grafana
        #   allowCrossNamespaceImport: false
    vmsingle:
      ingress:
        # -- Enable deployment of ingress for server component
        enabled: true
        annotations:
        #----------- auth ----------
          nginx.ingress.kubernetes.io/auth-url: |-
             http://ak-outpost-authentik-embedded-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
             https://vmsingle.xal.su/outpost.goauthentik.io/start?rd=$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: |-
             Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
             proxy_set_header X-Forwarded-Host $http_host;
        path: "/"
        # -- Ingress path type
        pathType: Prefix
        # -- Ingress controller class name
        ingressClassName: "nginx"
    
        # -- Array of host objects
        hosts:
          - vmsingle.xal.su
        tls:
          - secretName: wildcard-xal-su-tls-secret
            hosts:
              - vmsingle.xal.su
   
    alertmanager:
      # -- Create VMAlertmanager CR
      enabled: true
    vmalert:
      # -- Create VMAlert CR
      enabled: true
    vmauth:
      # -- Enable VMAuth CR
      enabled: true
    vmagent:
      # -- Create VMAgent CR
      enabled: true
      spec:
        extraArgs:
          promscrape.dropOriginalLabels: "false"   # Позволяет дебажить перемаркировку
    
    defaultDatasources:
      grafanaOperator:
        # -- Create datasources as CRDs (requires grafana-operator to be installed)
        enabled: false
        # spec:
        #   instanceSelector:
        #     matchLabels:
        #       dashboards: grafana
    
    # -- Grafana dependency chart configuration. For possible values refer [here](https://github.com/grafana/helm-charts/tree/main/charts/grafana#configuration)
    grafana:
      enabled: true
      assertNoLeakedSecrets: false
      grafana.ini:
        server:
          root_url: https://grafana.xal.su
        auth.generic_oauth:
          enabled: true
          name: Authentik-OAuth
          client_id: grafana
          client_secret: "CWRZMvCt8hi92Qo8DaszBO4CuKSW2GtTYvDylPfKDcYoxdts2oAIzndzm1IuobbVy9IGCpUWnNPWdt6K8BPIHr3g3qDRJeLgAxZR3UVAuY64JM2FyMLVl2lhaeBebk0u"
          scopes: openid email profile groups offline_access
          api_url: https://authentik.xal.su/application/o/userinfo/
          auth_url: https://authentik.xal.su/application/o/authorize/
          token_url: https://authentik.xal.su/application/o/token/
          role_attribute_path:  contains(groups[*], 'k8s-admins') && 'Admin' || 'Viewer'
          allow_assign_grafana_admin: true
          groups_attribute_path: groups
          allow_sign_up: true
          auto_login: false
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
          # - name: Prometheus
          #   type: prometheus
          #   url: http://vmsingle-victoria-metrics-vm.vm.svc:8429/prometheus
          #   access: proxy
          #   isDefault: true
          - name: Loki
            type: loki
            access: proxy
            url: http://loki-gateway.loki.svc.cluster.local/
            jsonData:
              timeout: 60
              maxLines: 1000
      ingress:
        enabled: true
        ingressClassName: "nginx"
        hosts:
          - grafana.xal.su
        tls:
          - secretName: wildcard-xal-su-tls-secret
            hosts:
              - grafana.xal.su
      # -- Create datasource configmap even if grafana deployment has been disabled
      forceDeployDatasource: false  
    
    # -- prometheus-node-exporter dependency chart configuration. For possible values check [here](https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-node-exporter/values.yaml)
    prometheus-node-exporter:
      enabled: true
    # -- kube-state-metrics dependency chart configuration. For possible values check [here](https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-state-metrics/values.yaml)
    kube-state-metrics:
      enabled: true
    
    # -- Component scraping the kubelets
    kubelet:
      enabled: true
    # Component scraping the kube api server
    kubeApiServer:
      # -- Enable Kube Api Server metrics scraping
      enabled: true
    # Component scraping the kube controller manager
    kubeControllerManager:
      # -- Enable kube controller manager metrics scraping
      enabled: true
    # Component scraping coreDns. Use either this or kubeDns
    coreDns:
      # -- Enabled CoreDNS metrics scraping
      enabled: true

    # Component scraping etcd
    kubeEtcd:
      # -- Enabled KubeETCD metrics scraping
      enabled: true

      # endpoints:
      #   - port: "prometheus-exporter"
      #     path: "/metrics"
      #     scheme: "http"
      # namespaceSelector:
      #   matchNames: ["vector"]

      # service:
        # enabled: true
        # port: 9598
        # targetPort: 9598
        # selector:
        #   app.kubernetes.io/component: Agent
        #   app.kubernetes.io/instance: vector
        #   app.kubernetes.io/name: vector
      # vmScrape:
      #   spec:
      #     jobLabel: jobLabel
      #     namespaceSelector:
      #       matchNames: [vector]
      #     endpoints:
      #       - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      #         port: prometheus-exporter
      #         scheme: http


    # Component scraping kube scheduler
    kubeScheduler:
      # -- Enable KubeScheduler metrics scraping
      enabled: true
    # Component scraping kube proxy
    kubeProxy:
      # -- Enable kube proxy metrics scraping
      enabled: false